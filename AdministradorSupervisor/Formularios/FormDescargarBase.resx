<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnExportar.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>